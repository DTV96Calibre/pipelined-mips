$date
	Tue Oct 17 20:04:46 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module adder $end
$var wire 32 ! a [31:0] $end
$var wire 32 " b [31:0] $end
$var wire 32 # out [31:0] $end
$upscope $end
$scope module and1_2 $end
$var wire 1 $ a $end
$var wire 1 % b $end
$var reg 1 & out $end
$upscope $end
$scope module ex_test $end
$var wire 32 ' ALUOutE [31:0] $end
$var wire 5 ( WriteRegE [4:0] $end
$var wire 32 ) WriteDataE [31:0] $end
$var wire 32 * SignImmE [31:0] $end
$var wire 5 + RtE [4:0] $end
$var wire 5 , RsE [4:0] $end
$var wire 1 - RegWriteE $end
$var wire 1 . RegDstE $end
$var wire 5 / RdE [4:0] $end
$var wire 32 0 RD2E [31:0] $end
$var wire 32 1 RD1E [31:0] $end
$var wire 1 2 MemtoRegE $end
$var wire 1 3 MemWriteE $end
$var reg 4 4 ALUControlD [3:0] $end
$var reg 32 5 ALUOutM [31:0] $end
$var reg 1 6 ALUSrcD $end
$var reg 1 7 FlushE $end
$var reg 2 8 ForwardAE [1:0] $end
$var reg 2 9 ForwardBE [1:0] $end
$var reg 1 : MemWriteD $end
$var reg 1 ; MemtoRegD $end
$var reg 32 < RD1D [31:0] $end
$var reg 32 = RD2D [31:0] $end
$var reg 5 > RdD [4:0] $end
$var reg 1 ? RegDstD $end
$var reg 1 @ RegWriteD $end
$var reg 32 A ResultW [31:0] $end
$var reg 5 B RsD [4:0] $end
$var reg 5 C RtD [4:0] $end
$var reg 32 D SignImmD [31:0] $end
$var reg 1 E clk $end
$scope module EX_stage $end
$var wire 4 F ALUControlD [3:0] $end
$var wire 32 G ALUOutE [31:0] $end
$var wire 32 H ALUOutM [31:0] $end
$var wire 1 6 ALUSrcD $end
$var wire 1 7 FlushE $end
$var wire 2 I ForwardAE [1:0] $end
$var wire 2 J ForwardBE [1:0] $end
$var wire 1 : MemWriteD $end
$var wire 1 ; MemtoRegD $end
$var wire 32 K RD1D [31:0] $end
$var wire 32 L RD2D [31:0] $end
$var wire 5 M RdD [4:0] $end
$var wire 1 ? RegDstD $end
$var wire 1 @ RegWriteD $end
$var wire 32 N ResultW [31:0] $end
$var wire 5 O RsD [4:0] $end
$var wire 5 P RtD [4:0] $end
$var wire 32 Q SignImmD [31:0] $end
$var wire 1 E clk $end
$var wire 5 R WriteRegE [4:0] $end
$var wire 32 S WriteDataE [31:0] $end
$var wire 32 T SrcBE [31:0] $end
$var wire 32 U SrcAE [31:0] $end
$var wire 32 V SignImmE [31:0] $end
$var wire 5 W RtE [4:0] $end
$var wire 5 X RsE [4:0] $end
$var wire 1 - RegWriteE $end
$var wire 1 . RegDstE $end
$var wire 5 Y RdE [4:0] $end
$var wire 32 Z RD2E [31:0] $end
$var wire 32 [ RD1E [31:0] $end
$var wire 1 2 MemtoRegE $end
$var wire 1 3 MemWriteE $end
$var wire 1 \ ALUSrcE $end
$var wire 1 ] ALUOutD $end
$var wire 4 ^ ALUControlE [3:0] $end
$scope module EX_pipeline_reg $end
$var wire 4 _ ALUControlD [3:0] $end
$var wire 1 6 ALUSrcD $end
$var wire 1 7 FlushE $end
$var wire 1 : MemWriteD $end
$var wire 1 ; MemtoRegD $end
$var wire 32 ` RD1D [31:0] $end
$var wire 32 a RD2D [31:0] $end
$var wire 5 b RdD [4:0] $end
$var wire 1 ? RegDstD $end
$var wire 1 @ RegWriteD $end
$var wire 5 c RsD [4:0] $end
$var wire 5 d RtD [4:0] $end
$var wire 32 e SignImmD [31:0] $end
$var wire 1 E clk $end
$var wire 32 f SignImmE [31:0] $end
$var wire 5 g RtE [4:0] $end
$var wire 5 h RsE [4:0] $end
$var wire 1 - RegWriteE $end
$var wire 1 . RegDstE $end
$var wire 5 i RdE [4:0] $end
$var wire 32 j RD2E [31:0] $end
$var wire 32 k RD1E [31:0] $end
$var wire 1 2 MemtoRegE $end
$var wire 1 3 MemWriteE $end
$var wire 1 \ ALUSrcE $end
$var wire 4 l ALUControlE [3:0] $end
$scope module alu_control $end
$var wire 1 m clear $end
$var wire 1 E clock $end
$var wire 4 n new_value [3:0] $end
$var wire 4 o curr_value [3:0] $end
$var wire 32 p adj_new_value [31:0] $end
$var wire 32 q adj_curr_value [31:0] $end
$scope module value_reg $end
$var wire 1 m clear $end
$var wire 1 E clock $end
$var wire 32 r new_value [31:0] $end
$var wire 32 s gated_new_value [31:0] $end
$var wire 32 t curr_value [31:0] $end
$scope module r $end
$var wire 1 E clock $end
$var wire 32 u new_value [31:0] $end
$var wire 1 v should_write $end
$var reg 32 w curr_value [31:0] $end
$var reg 1 x is_init $end
$upscope $end
$upscope $end
$upscope $end
$scope module alu_src $end
$var wire 1 y clear $end
$var wire 1 E clock $end
$var wire 1 6 new_value $end
$var wire 1 \ curr_value $end
$var wire 32 z adj_new_value [31:0] $end
$var wire 32 { adj_curr_value [31:0] $end
$scope module value_reg $end
$var wire 1 y clear $end
$var wire 1 E clock $end
$var wire 32 | new_value [31:0] $end
$var wire 32 } gated_new_value [31:0] $end
$var wire 32 ~ curr_value [31:0] $end
$scope module r $end
$var wire 1 E clock $end
$var wire 32 !" new_value [31:0] $end
$var wire 1 "" should_write $end
$var reg 32 #" curr_value [31:0] $end
$var reg 1 $" is_init $end
$upscope $end
$upscope $end
$upscope $end
$scope module mem_to_reg $end
$var wire 1 %" clear $end
$var wire 1 E clock $end
$var wire 1 ; new_value $end
$var wire 1 2 curr_value $end
$var wire 32 &" adj_new_value [31:0] $end
$var wire 32 '" adj_curr_value [31:0] $end
$scope module value_reg $end
$var wire 1 %" clear $end
$var wire 1 E clock $end
$var wire 32 (" new_value [31:0] $end
$var wire 32 )" gated_new_value [31:0] $end
$var wire 32 *" curr_value [31:0] $end
$scope module r $end
$var wire 1 E clock $end
$var wire 32 +" new_value [31:0] $end
$var wire 1 ," should_write $end
$var reg 32 -" curr_value [31:0] $end
$var reg 1 ." is_init $end
$upscope $end
$upscope $end
$upscope $end
$scope module mem_write $end
$var wire 1 /" clear $end
$var wire 1 E clock $end
$var wire 1 : new_value $end
$var wire 1 3 curr_value $end
$var wire 32 0" adj_new_value [31:0] $end
$var wire 32 1" adj_curr_value [31:0] $end
$scope module value_reg $end
$var wire 1 /" clear $end
$var wire 1 E clock $end
$var wire 32 2" new_value [31:0] $end
$var wire 32 3" gated_new_value [31:0] $end
$var wire 32 4" curr_value [31:0] $end
$scope module r $end
$var wire 1 E clock $end
$var wire 32 5" new_value [31:0] $end
$var wire 1 6" should_write $end
$var reg 32 7" curr_value [31:0] $end
$var reg 1 8" is_init $end
$upscope $end
$upscope $end
$upscope $end
$scope module rd $end
$var wire 1 9" clear $end
$var wire 1 E clock $end
$var wire 5 :" new_value [4:0] $end
$var wire 5 ;" curr_value [4:0] $end
$var wire 32 <" adj_new_value [31:0] $end
$var wire 32 =" adj_curr_value [31:0] $end
$scope module value_reg $end
$var wire 1 9" clear $end
$var wire 1 E clock $end
$var wire 32 >" new_value [31:0] $end
$var wire 32 ?" gated_new_value [31:0] $end
$var wire 32 @" curr_value [31:0] $end
$scope module r $end
$var wire 1 E clock $end
$var wire 32 A" new_value [31:0] $end
$var wire 1 B" should_write $end
$var reg 32 C" curr_value [31:0] $end
$var reg 1 D" is_init $end
$upscope $end
$upscope $end
$upscope $end
$scope module rd1 $end
$var wire 1 E" clear $end
$var wire 1 E clock $end
$var wire 32 F" new_value [31:0] $end
$var wire 32 G" gated_new_value [31:0] $end
$var wire 32 H" curr_value [31:0] $end
$scope module r $end
$var wire 1 E clock $end
$var wire 32 I" new_value [31:0] $end
$var wire 1 J" should_write $end
$var reg 32 K" curr_value [31:0] $end
$var reg 1 L" is_init $end
$upscope $end
$upscope $end
$scope module rd2 $end
$var wire 1 M" clear $end
$var wire 1 E clock $end
$var wire 32 N" new_value [31:0] $end
$var wire 32 O" gated_new_value [31:0] $end
$var wire 32 P" curr_value [31:0] $end
$scope module r $end
$var wire 1 E clock $end
$var wire 32 Q" new_value [31:0] $end
$var wire 1 R" should_write $end
$var reg 32 S" curr_value [31:0] $end
$var reg 1 T" is_init $end
$upscope $end
$upscope $end
$scope module reg_dst $end
$var wire 1 U" clear $end
$var wire 1 E clock $end
$var wire 1 ? new_value $end
$var wire 1 . curr_value $end
$var wire 32 V" adj_new_value [31:0] $end
$var wire 32 W" adj_curr_value [31:0] $end
$scope module value_reg $end
$var wire 1 U" clear $end
$var wire 1 E clock $end
$var wire 32 X" new_value [31:0] $end
$var wire 32 Y" gated_new_value [31:0] $end
$var wire 32 Z" curr_value [31:0] $end
$scope module r $end
$var wire 1 E clock $end
$var wire 32 [" new_value [31:0] $end
$var wire 1 \" should_write $end
$var reg 32 ]" curr_value [31:0] $end
$var reg 1 ^" is_init $end
$upscope $end
$upscope $end
$upscope $end
$scope module reg_write $end
$var wire 1 _" clear $end
$var wire 1 E clock $end
$var wire 1 @ new_value $end
$var wire 1 - curr_value $end
$var wire 32 `" adj_new_value [31:0] $end
$var wire 32 a" adj_curr_value [31:0] $end
$scope module value_reg $end
$var wire 1 _" clear $end
$var wire 1 E clock $end
$var wire 32 b" new_value [31:0] $end
$var wire 32 c" gated_new_value [31:0] $end
$var wire 32 d" curr_value [31:0] $end
$scope module r $end
$var wire 1 E clock $end
$var wire 32 e" new_value [31:0] $end
$var wire 1 f" should_write $end
$var reg 32 g" curr_value [31:0] $end
$var reg 1 h" is_init $end
$upscope $end
$upscope $end
$upscope $end
$scope module rs $end
$var wire 1 i" clear $end
$var wire 1 E clock $end
$var wire 5 j" new_value [4:0] $end
$var wire 5 k" curr_value [4:0] $end
$var wire 32 l" adj_new_value [31:0] $end
$var wire 32 m" adj_curr_value [31:0] $end
$scope module value_reg $end
$var wire 1 i" clear $end
$var wire 1 E clock $end
$var wire 32 n" new_value [31:0] $end
$var wire 32 o" gated_new_value [31:0] $end
$var wire 32 p" curr_value [31:0] $end
$scope module r $end
$var wire 1 E clock $end
$var wire 32 q" new_value [31:0] $end
$var wire 1 r" should_write $end
$var reg 32 s" curr_value [31:0] $end
$var reg 1 t" is_init $end
$upscope $end
$upscope $end
$upscope $end
$scope module rt $end
$var wire 1 u" clear $end
$var wire 1 E clock $end
$var wire 5 v" new_value [4:0] $end
$var wire 5 w" curr_value [4:0] $end
$var wire 32 x" adj_new_value [31:0] $end
$var wire 32 y" adj_curr_value [31:0] $end
$scope module value_reg $end
$var wire 1 u" clear $end
$var wire 1 E clock $end
$var wire 32 z" new_value [31:0] $end
$var wire 32 {" gated_new_value [31:0] $end
$var wire 32 |" curr_value [31:0] $end
$scope module r $end
$var wire 1 E clock $end
$var wire 32 }" new_value [31:0] $end
$var wire 1 ~" should_write $end
$var reg 32 !# curr_value [31:0] $end
$var reg 1 "# is_init $end
$upscope $end
$upscope $end
$upscope $end
$scope module sign_imm $end
$var wire 1 ## clear $end
$var wire 1 E clock $end
$var wire 32 $# new_value [31:0] $end
$var wire 32 %# gated_new_value [31:0] $end
$var wire 32 &# curr_value [31:0] $end
$scope module r $end
$var wire 1 E clock $end
$var wire 32 '# new_value [31:0] $end
$var wire 1 (# should_write $end
$var reg 32 )# curr_value [31:0] $end
$var reg 1 *# is_init $end
$upscope $end
$upscope $end
$upscope $end
$scope module myALU $end
$var wire 4 +# aluOP [3:0] $end
$var wire 32 ,# rvalue [31:0] $end
$var wire 32 -# lvalue [31:0] $end
$var reg 32 .# result [31:0] $end
$var reg 32 /# truevall [31:0] $end
$var reg 32 0# truevalr [31:0] $end
$upscope $end
$scope module srcA_mux $end
$var wire 32 1# a [31:0] $end
$var wire 32 2# b [31:0] $end
$var wire 32 3# c [31:0] $end
$var wire 2 4# control [1:0] $end
$var wire 32 5# out [31:0] $end
$upscope $end
$scope module srcB_mux $end
$var wire 32 6# a [31:0] $end
$var wire 1 \ high_a $end
$var wire 32 7# out [31:0] $end
$var wire 32 8# b [31:0] $end
$upscope $end
$scope module write_data_mux $end
$var wire 32 9# a [31:0] $end
$var wire 32 :# b [31:0] $end
$var wire 32 ;# c [31:0] $end
$var wire 2 <# control [1:0] $end
$var wire 32 =# out [31:0] $end
$upscope $end
$scope module write_reg_mux $end
$var wire 5 ># a [4:0] $end
$var wire 5 ?# b [4:0] $end
$var wire 1 . high_a $end
$var wire 5 @# out [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module inverter $end
$var wire 1 A# control $end
$var wire 1 B# in $end
$var reg 1 C# out $end
$upscope $end
$scope module pipeline_reg_2bit $end
$var wire 1 D# clear $end
$var wire 1 E# clock $end
$var wire 2 F# new_value [1:0] $end
$var wire 2 G# curr_value [1:0] $end
$var wire 32 H# adj_new_value [31:0] $end
$var wire 32 I# adj_curr_value [31:0] $end
$scope module value_reg $end
$var wire 1 D# clear $end
$var wire 1 E# clock $end
$var wire 32 J# new_value [31:0] $end
$var wire 32 K# gated_new_value [31:0] $end
$var wire 32 L# curr_value [31:0] $end
$scope module r $end
$var wire 1 E# clock $end
$var wire 32 M# new_value [31:0] $end
$var wire 1 N# should_write $end
$var reg 32 O# curr_value [31:0] $end
$var reg 1 P# is_init $end
$upscope $end
$upscope $end
$upscope $end
$scope module pipeline_reg_3bit $end
$var wire 1 Q# clear $end
$var wire 1 R# clock $end
$var wire 3 S# new_value [2:0] $end
$var wire 3 T# curr_value [2:0] $end
$var wire 32 U# adj_new_value [31:0] $end
$var wire 32 V# adj_curr_value [31:0] $end
$scope module value_reg $end
$var wire 1 Q# clear $end
$var wire 1 R# clock $end
$var wire 32 W# new_value [31:0] $end
$var wire 32 X# gated_new_value [31:0] $end
$var wire 32 Y# curr_value [31:0] $end
$scope module r $end
$var wire 1 R# clock $end
$var wire 32 Z# new_value [31:0] $end
$var wire 1 [# should_write $end
$var reg 32 \# curr_value [31:0] $end
$var reg 1 ]# is_init $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0]#
b0 \#
1[#
b0xxx Z#
b0 Y#
b0xxx X#
b0zzz W#
b0 V#
b0zzz U#
b0 T#
bz S#
zR#
zQ#
0P#
b0 O#
1N#
b0xx M#
b0 L#
b0xx K#
b0zz J#
b0 I#
b0zz H#
b0 G#
bz F#
zE#
zD#
xC#
zB#
zA#
b0 @#
b0 ?#
b0 >#
b0 =#
b0 <#
b10 ;#
b111 :#
b0 9#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b10 3#
b111 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
0*#
b0 )#
1(#
b0 '#
b0 &#
b0 %#
b0 $#
1##
0"#
b0 !#
1~"
b0 }"
b0 |"
b0 {"
b101 z"
b0 y"
b101 x"
b0 w"
b101 v"
1u"
0t"
b0 s"
1r"
b0 q"
b0 p"
b0 o"
b100 n"
b0 m"
b100 l"
b0 k"
b100 j"
1i"
0h"
b0 g"
1f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
1_"
0^"
b0 ]"
1\"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
1U"
0T"
b0 S"
1R"
b0 Q"
b0 P"
b0 O"
b11 N"
1M"
0L"
b0 K"
1J"
b0 I"
b0 H"
b0 G"
b11 F"
1E"
0D"
b0 C"
1B"
b0 A"
b0 @"
b0 ?"
b110 >"
b0 ="
b110 <"
b0 ;"
b110 :"
19"
08"
b0 7"
16"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
1/"
0."
b0 -"
1,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
1%"
0$"
b0 #"
1""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
1y
0x
b0 w
1v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
1m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b101 d
b100 c
b110 b
b11 a
b11 `
b0 _
b0 ^
0]
0\
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b101 P
b100 O
b111 N
b110 M
b11 L
b11 K
b0 J
b0 I
b10 H
bz G
b0 F
0E
b0 D
b101 C
b100 B
b111 A
0@
0?
b110 >
b11 =
b11 <
0;
0:
b0 9
b0 8
07
06
b10 5
b0 4
03
02
b0 1
b0 0
b0 /
0.
0-
b0 ,
b0 +
b0 *
b0 )
b0 (
bz '
x&
z%
z$
bx #
bz "
bz !
$end
#1
1h"
1."
18"
1$"
1^"
1x
1t"
1"#
1D"
1L"
1T"
1*#
b10000 <"
b10000 >"
b10000 >
b10000 M
b10000 b
b10000 :"
b1100 x"
b1100 z"
b1100 C
b1100 P
b1100 d
b1100 v"
1E
#2
0E
#3
b1 V"
b1 X"
1?
1E
#4
0E
#5
b1 Y"
b1 ["
b100 o"
b100 q"
b1100 {"
b1100 }"
b10000 ?"
b10000 A"
b11 G"
b11 I"
b11 O"
b11 Q"
0_"
0%"
0/"
0y
0U"
0m
0i"
0u"
09"
0E"
0M"
0##
17
1E
#6
0E
#7
1]
b11 .#
b11 0#
b11 T
b11 ,#
b11 7#
b11 /#
b10000 (
b10000 R
b10000 @#
b11 )
b11 S
b11 8#
b11 =#
b11 U
b11 -#
b11 5#
b10000 /
b10000 Y
b10000 i
b10000 ;"
b10000 >#
b1100 +
b1100 W
b1100 g
b1100 w"
b1100 ?#
b100 ,
b100 X
b100 h
b100 k"
1.
b11 0
b11 Z
b11 j
b11 P"
b11 S"
b11 9#
b11 1
b11 [
b11 k
b11 H"
b11 K"
b11 1#
b10000 ="
b10000 @"
b10000 C"
b1100 y"
b1100 |"
b1100 !#
b100 m"
b100 p"
b100 s"
b1 W"
b1 Z"
b1 ]"
b0 Y"
b0 ["
b0 o"
b0 q"
b0 {"
b0 }"
b0 ?"
b0 A"
b0 O"
b0 Q"
b0 G"
b0 I"
1_"
1%"
1/"
1y
1U"
1m
1i"
1u"
19"
1E"
1M"
1##
07
b10110 5
b10110 H
b10110 3#
b10110 ;#
b100000 A
b100000 N
b100000 2#
b100000 :#
b101010 <
b101010 K
b101010 `
b101010 F"
1E
#8
0E
#9
b0 (
b0 R
b0 @#
b0 /#
0.
b0 ,
b0 X
b0 h
b0 k"
b0 +
b0 W
b0 g
b0 w"
b0 ?#
b0 /
b0 Y
b0 i
b0 ;"
b0 >#
b0 U
b0 -#
b0 5#
b0 W"
b0 Z"
b0 ]"
b0 m"
b0 p"
b0 s"
b0 y"
b0 |"
b0 !#
b0 ="
b0 @"
b0 C"
b0 1
b0 [
b0 k
b0 H"
b0 K"
b0 1#
b0 0
b0 Z
b0 j
b0 P"
b0 S"
b0 9#
0]
b0 .#
b100000 0#
b100000 T
b100000 ,#
b100000 7#
b100000 )
b100000 S
b100000 8#
b100000 =#
b1 9
b1 J
b1 <#
1E
#10
0E
#11
b10110 0#
b10110 T
b10110 ,#
b10110 7#
b10110 )
b10110 S
b10110 8#
b10110 =#
b10 9
b10 J
b10 <#
1E
#12
0E
#13
b1 Y"
b1 ["
b100 o"
b100 q"
b1100 {"
b1100 }"
b10000 ?"
b10000 A"
b101010 G"
b101010 I"
b11 O"
b11 Q"
0_"
0%"
0/"
0y
0U"
0m
0i"
0u"
09"
0E"
0M"
0##
17
1E
#14
0E
#15
b10 .#
b101010 /#
b10000 (
b10000 R
b10000 @#
b101010 U
b101010 -#
b101010 5#
b10000 /
b10000 Y
b10000 i
b10000 ;"
b10000 >#
b1100 +
b1100 W
b1100 g
b1100 w"
b1100 ?#
b100 ,
b100 X
b100 h
b100 k"
1.
b11 0
b11 Z
b11 j
b11 P"
b11 S"
b11 9#
b101010 1
b101010 [
b101010 k
b101010 H"
b101010 K"
b101010 1#
b10000 ="
b10000 @"
b10000 C"
b1100 y"
b1100 |"
b1100 !#
b100 m"
b100 p"
b100 s"
b1 W"
b1 Z"
b1 ]"
b11 0#
b11 T
b11 ,#
b11 7#
b11 )
b11 S
b11 8#
b11 =#
b0 Y"
b0 ["
b0 o"
b0 q"
b0 {"
b0 }"
b0 ?"
b0 A"
b0 G"
b0 I"
b0 O"
b0 Q"
b0 9
b0 J
b0 <#
1_"
1%"
1/"
1y
1U"
1m
1i"
1u"
19"
1E"
1M"
1##
07
1E
#16
0E
#17
b0 0#
b0 (
b0 R
b0 @#
b0 T
b0 ,#
b0 7#
0.
b0 ,
b0 X
b0 h
b0 k"
b0 +
b0 W
b0 g
b0 w"
b0 ?#
b0 /
b0 Y
b0 i
b0 ;"
b0 >#
b0 )
b0 S
b0 8#
b0 =#
b0 W"
b0 Z"
b0 ]"
b0 m"
b0 p"
b0 s"
b0 y"
b0 |"
b0 !#
b0 ="
b0 @"
b0 C"
b0 1
b0 [
b0 k
b0 H"
b0 K"
b0 1#
b0 0
b0 Z
b0 j
b0 P"
b0 S"
b0 9#
b0 .#
b100000 /#
b100000 U
b100000 -#
b100000 5#
b1 p
b1 r
b1 4
b1 F
b1 _
b1 n
b1 8
b1 I
b1 4#
1E
#18
0E
#19
b100000 0#
b100000 T
b100000 ,#
b100000 7#
b0 /#
b100000 )
b100000 S
b100000 8#
b100000 =#
b0 U
b0 -#
b0 5#
b1 9
b1 J
b1 <#
b0 8
b0 I
b0 4#
b10 p
b10 r
b10 4
b10 F
b10 _
b10 n
1E
#20
0E
#21
b0 .#
b10110 /#
b10110 U
b10110 -#
b10110 5#
b10 8
b10 I
b10 4#
b110 p
b110 r
b110 4
b110 F
b110 _
b110 n
1E
#22
0E
#23
b10110 .#
b10110 0#
b10110 T
b10110 ,#
b10110 7#
b10110 )
b10110 S
b10110 8#
b10110 =#
b10 9
b10 J
b10 <#
b1 z
b1 |
16
b111 p
b111 r
b111 4
b111 F
b111 _
b111 n
1E
#24
0E
#25
1E
